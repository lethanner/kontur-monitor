#include "ESP8266WiFi.h"
#include "TZ.h"
#include "src/VK.h"
#include "src/cretendials.h"
#include "src/buzz.h"
#include "src/pins.h"

VKAPI vk(access_token, group_id, &Serial);
time_t lastChangeTime = 0;
bool openFlag = true;
volatile bool buttonPress = false;

// —ç–∫—Å–ø–ª—É–∞—Ç–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –±–µ–∑ payload, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è—è –µ—ë —Ç–µ–∫—Å—Ç
// –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –¥–µ–ª–∞—Ç—å payload –Ω–µ—Ç –Ω–∏–∫–∞–∫–æ–≥–æ —Å–º—ã—Å–ª–∞
static const char* default_button =
 "{\"buttons\": [[{\"action\": {\"type\": \"text\", \"label\": \"–ö–ª—É–± –æ—Ç–∫—Ä—ã—Ç?\"}}]]}";

static const char* green = "üü¢ –ö–ª—É–± –æ—Ç–∫—Ä—ã—Ç.";
static const char* red = "üî¥ –ö–ª—É–± –∑–∞–∫—Ä—ã—Ç.";

void buzz(const uint16_t table[][2], const uint8_t length)
{
    for (uint8_t i = 0; i < length; i++) {
        tone(TONE_PIN, table[i][0], table[i][1]);
        delay(table[i][1]);
    }
    noTone(TONE_PIN);
}

void terminate()
{
    detachInterrupt(digitalPinToInterrupt(BTN_PIN));
    digitalWrite(LED_PIN, 0);
    // –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤—è–∑–∏ —Å–ª–µ–¥—É–µ—Ç –∑–∞–º–æ—Ä–∞–∂–∏–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
    // —Å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–º –∑–≤—É–∫–æ–≤—ã–º —Å–∏–≥–Ω–∞–ª–æ–º. —Å–ø—É—Å—Ç—è 5 –º–∏–Ω—É—Ç - –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞
    Serial.println(F("[ERROR] Communications epic fail. System halted."));
    byte autoRestartCounter = 0;
    while (1) {
        if (++autoRestartCounter > 100) ESP.restart();
        Buzz::sos();
        delay(3000);
    }
}

void processEvent(JsonObjectConst event)
{
    Serial.println(F("[DEBUG] processEvent() called"));
    const char* type = event["type"];
    if (strcmp(type, "message_new") == 0) {
        uint32_t from_id = event["object"]["message"]["from_id"];
        const char* text = event["object"]["message"]["text"];
        //const char* payload = event["object"]["message"]["payload"];

        Serial.printf("[MESSAGE] From id%u: %s\r\n", from_id, text);
        //vk.sendMessage(from_id, "–ü—Ä–∏–≤–µ—Ç! –ì–æ–≤–æ—Ä–∏—Ç ESP8266.");

        if (strncmp(text, "–ö–ª—É–± –æ—Ç–∫—Ä—ã—Ç", 21) == 0 || strncmp(text, "–∫–ª—É–± –æ—Ç–∫—Ä—ã—Ç", 21) == 0) {
            char reply[256];
            struct tm* _now = localtime(&lastChangeTime);

            snprintf(reply, 256, "%s\r\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–∞ –Ω–∞ %i:%i:%i",
                     openFlag ? green : red, _now->tm_hour, _now->tm_min, _now->tm_sec);
            vk.sendMessage(from_id, reply, default_button);
        }
    }
}

IRAM_ATTR void toggleKonturState()
{
    if (buttonPress) return;

    buttonPress = true;
    tone(TONE_PIN, openFlag ? Buzz::disabled : Buzz::enabled, 250);
}

void setup()
{
    pinMode(TONE_PIN, OUTPUT);
    pinMode(LED_PIN, OUTPUT);
    pinMode(BTN_PIN, INPUT_PULLUP);
    buzz(Buzz::startup, 4);

    Serial.begin(74880);
    Serial.println(F("\r\nKontur monitoring system v.1.0\r\n"
                     "Made by Lethanner.\r\n"));

    // –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ wi-fi
    Serial.print(F("[WiFi] Waiting for connection..."));
    WiFi.mode(WIFI_STA);
    WiFi.setAutoReconnect(true);
    WiFi.begin(ssid, password);
    uint16_t attempt_counter = 0;

    while (WiFi.status() != WL_CONNECTED) {
        // –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–≤—è–∑–∏ —Å wi-fi –∑–∞—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è –Ω–∞ 30 —Å–µ–∫—É–Ω–¥ - –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –∑–≤—É–∫–æ–≤–æ–π —Å–∏–≥–Ω–∞–ª
        if (++attempt_counter > 240 && attempt_counter % 24 == 0) Buzz::warning();
        // –µ—Å–ª–∏ –∑–∞—Ç—è–Ω—É–ª–∞—Å—å —É–∂–µ –ø—Ä–∏–º–µ—Ä–Ω–æ –Ω–∞ 5 –º–∏–Ω—É—Ç - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
        // –ü–°: –¥–∞, —è –Ω–µ —É—á—ë–ª –∑–∞–¥–µ—Ä–∂–∫—É –æ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ warning()
        else if (attempt_counter > 2400) terminate();

        // –º–∏–≥–∞–Ω–∏–µ —Å–≤–µ—Ç–æ–¥–∏–æ–¥–∏–∫–æ–º
        digitalWrite(LED_PIN, !digitalRead(LED_PIN));
        delay(125);
    }
    Serial.println(WiFi.localIP());

    attempt_counter = 0;
    // —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —á–∞—Å–æ–≤ –ø–æ NTP
    Serial.print(F("[NTP] Waiting for time..."));
    configTime(TZ_Europe_Samara, 0, "pool.ntp.org", "ntp0.ntp-servers.net");
    time_t now = time(nullptr);
    while (now < 1000000000) {
        now = time(nullptr);
        digitalWrite(LED_PIN, !digitalRead(LED_PIN));
        // –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ –≤–∞—Ä–Ω–∏–Ω–≥–∏, –∫–∞–∫ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –≤–∞–π—Ñ–∞—é
        if (++attempt_counter > 120 && attempt_counter % 12 == 0) Buzz::warning();
        if (attempt_counter > 1200) terminate();
        delay(250);
    }
    Serial.println(now);

    vk.init();
    vk.setIncomingMessagesCallback(&processEvent);

    // –¥–µ–ª–∞–µ–º —Ç—Ä–∏ –ø–æ–ø—ã—Ç–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤—è–∑—å —Å —Å–µ—Ä–≤–µ—Ä–æ–º Long Poll
    // –µ—Å–ª–∏ –Ω–µ —É–¥–∞—ë—Ç—Å—è - –≤—Å—ë, –∏–∑–≤–∏–Ω–∏—Ç–µ, halt
    for (byte i = 0; i < 3; i++) {
        if (vk.longPoll()) break;
        else if (i == 2) terminate();
        Buzz::warning();
    }

    tone(TONE_PIN, Buzz::bootOK, 250);
    digitalWrite(LED_PIN, true);
    lastChangeTime = time(nullptr);

    attachInterrupt(digitalPinToInterrupt(BTN_PIN), toggleKonturState, FALLING);
}

void loop()
{
    static byte fail_count = 0;

    // —Å–ø–æ–∫–æ–π–Ω–æ –æ–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä –í–ö –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
    // –µ—Å–ª–∏ 3 –ø–æ–¥—Ä—è–¥ –Ω–µ—É–¥–∞—á–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ —Å–≤—è–∑–∏ - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–±–æ—Ç—É
    if (!vk.longPoll()) {
        Buzz::warning();
        if (++fail_count > 3) terminate();
    } else fail_count = 0;

    // –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –ø—Ä–æ–ø–∞–ª–∞ —Å–≤—è–∑—å —Å wi-fi - –ø–∏—â–∏–º –∏ –ø–æ–¥–º–∏–≥–∏–≤–∞–µ–º –¥–∏–æ–¥–∏–∫–æ–º
    // –∞ –ø–æ—Å–ª–µ 3 –º–∏–Ω—É—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Å–≤—è–∑–∏ - terminate
    while (WiFi.status() != WL_CONNECTED) {
        delay(2000);
        if (++fail_count > 90) terminate();
        digitalWrite(LED_PIN, !openFlag);
        Buzz::warning();
        digitalWrite(LED_PIN, openFlag);
    }

    // –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–æ—á–∫—É
    if (buttonPress) {
        openFlag = !openFlag;
        digitalWrite(LED_PIN, openFlag);
        lastChangeTime = time(nullptr);

        buttonPress = false;
    }
}
