#include "ESP8266WiFi.h"
#include "ESP8266mDNS.h"
#include "WiFiUdp.h"
#include "ArduinoOTA.h"
#include "TZ.h"
#include "src/VK.h"
#include "src/cretendials.h"
#include "src/buzz.h"
#include "src/pins.h"

VKAPI vk(access_token, group_id, &Serial);
//time_t lastChangeTime = 0;
bool openFlag = false;
bool otaFlag = false;
bool detect220V = false;
volatile bool buttonPress = false;

time_t now = 0;
struct tm* _now;

// —ç–∫—Å–ø–ª—É–∞—Ç–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –±–µ–∑ payload, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è—è –µ—ë —Ç–µ–∫—Å—Ç
// –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –¥–µ–ª–∞—Ç—å payload –Ω–µ—Ç –Ω–∏–∫–∞–∫–æ–≥–æ —Å–º—ã—Å–ª–∞
static const char* default_button =
 "{\"buttons\": [[{\"action\": {\"type\": \"text\", \"label\": \"–ö–ª—É–± –æ—Ç–∫—Ä—ã—Ç?\"}}]]}";

static const char* green = "üü¢ –î–∞, –∫–ª—É–± –æ—Ç–∫—Ä—ã—Ç! –ü—Ä–∏—Ö–æ–¥–∏.";
static const char* red = "üî¥ –ö–ª—É–± –∑–∞–∫—Ä—ã—Ç. :(";

// —Å—á—ë—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
byte fail_counter[2];

void buzz(const uint16_t table[][2], const uint8_t length)
{
    for (uint8_t i = 0; i < length; i++) {
        tone(TONE_PIN, table[i][0], table[i][1]);
        delay(table[i][1]);
    }
    noTone(TONE_PIN);
}

void terminate()
{
    detachInterrupt(digitalPinToInterrupt(BTN_PIN));
    digitalWrite(LED_PIN, 0);
    // –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤—è–∑–∏ —Å–ª–µ–¥—É–µ—Ç –∑–∞–º–æ—Ä–∞–∂–∏–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
    // —Å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–º –∑–≤—É–∫–æ–≤—ã–º —Å–∏–≥–Ω–∞–ª–æ–º. —Å–ø—É—Å—Ç—è 5 –º–∏–Ω—É—Ç - –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞
    Serial.println(F("[ERROR] Communications epic fail. System halted."));
    byte autoRestartCounter = 0;
    while (1) {
        if (++autoRestartCounter > 100) ESP.restart();
        Buzz::sos();
        delay(3000);
    }
}

void processEvent(JsonObjectConst event)
{
    Serial.println(F("[DEBUG] processEvent() called"));
    const char* type = event["type"];
    if (strcmp(type, "message_new") == 0) {
        uint32_t from_id = event["object"]["message"]["from_id"];
        uint32_t peer_id = event["object"]["message"]["peer_id"];
        const char* text = event["object"]["message"]["text"];
        //const char* payload = event["object"]["message"]["payload"];

        Serial.printf("[MESSAGE] From id%u: %s\r\n", from_id, text);

        // –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ "–∫–ª—É–± –æ—Ç–∫—Ä—ã—Ç?"
        // PS: —Ñ–∏–≥ —Ç–∞–º, –∞ –Ω–µ strcasecmp - –∏–±–æ —é–Ω–∏–∫–æ–¥
        if (strstr(text, "–ö–ª—É–± –æ—Ç–∫—Ä—ã—Ç") != NULL || strstr(text, "–∫–ª—É–± –æ—Ç–∫—Ä—ã—Ç") != NULL) {
            //time_t diff = time(nullptr) - lastChangeTime;
            // –∫–Ω–æ–ø–∫–∞ "–ö–ª—É–± –æ—Ç–∫—Ä—ã—Ç?" –±—É–¥–µ—Ç –ø–æ—è–≤–ª—è—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–∞—Ö, –Ω–æ –Ω–µ –≤ –±–µ—Å–µ–¥–∞—Ö
            peer_id > 2000000000
             ? vk.sendMessage(peer_id, openFlag ? green : red)
             : vk.sendMessage(peer_id, openFlag ? green : red, default_button);
        }
        // –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
        else if (strcmp(text, "/status") == 0) {
            char reply[140];
            snprintf_P(
             reply, 140,
             PSTR("time: %i:%i:%i\r\n"
                  "uptime: %u s\r\n"
                  "wi-fi rssi: %i dBm\r\n"
                  "wi-fi errors: %u\r\n"
                  "request errors: %u\r\n"
                  "220v: %u\r\n"
                  "free heap: %u bytes\r\n"),
             _now->tm_hour, _now->tm_min, _now->tm_sec, millis() / 1000, WiFi.RSSI(),
             fail_counter[1], fail_counter[0],
             static_cast<uint8_t>(digitalRead(DETECT_PIN)), ESP.getFreeHeap());
            vk.sendMessage(peer_id, reply);
        }
        // –∫–æ–º–∞–Ω–¥—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —á–∞—Ç–∞
        else if (peer_id == sa_dialog_id) {
            // —É–¥–∞–ª–µ–Ω–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞
            if (strcmp(text, "/reboot") == 0) {
                ESP.restart();
            }
            // –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º OTA
            else if (strcmp(text, "/ota") == 0) {
                otaFlag = true;
                //vk.sendMessage(sa_dialog_id, "going ota, wait for audio signal");
            }
            // —É–¥–∞–ª–µ–Ω–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            else if (strcmp(text, "/toggle") == 0) {
                openFlag = !openFlag;
                digitalWrite(LED_PIN, openFlag);
                vk.sendMessage(sa_dialog_id, openFlag ? "–æ—Ç–∫—Ä—ã–ª–æ—Å—å" : "–∑–∞–∫—Ä—ã–ª–æ—Å—å");
            }
        }
    }
}

IRAM_ATTR void toggleKonturState()
{
    if (buttonPress) return;

    buttonPress = true;
    tone(TONE_PIN, openFlag ? Buzz::disabled : Buzz::enabled, 250);
}

void setup()
{
    rst_info* resetInfo;
    resetInfo = ESP.getResetInfoPtr();
    uint32_t startup_counter = millis();

    pinMode(TONE_PIN, OUTPUT);
    pinMode(LED_PIN, OUTPUT);
    pinMode(BTN_PIN, INPUT_PULLUP);
    pinMode(DETECT_PIN, INPUT);
    buzz(Buzz::startup, 4);

    Serial.begin(74880);
    Serial.println(F("\r\nKontur monitoring system v.1.0\r\n"
                     "Made by Lethanner.\r\n"));

    // –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ wi-fi
    Serial.print(F("[WiFi] Waiting for connection..."));
    WiFi.mode(WIFI_STA);
    WiFi.setAutoReconnect(true);
    WiFi.begin(ssid, password);
    uint16_t attempt_counter = 0;

    while (WiFi.status() != WL_CONNECTED) {
        // –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–≤—è–∑–∏ —Å wi-fi –∑–∞—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è –Ω–∞ 30 —Å–µ–∫—É–Ω–¥ - –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –∑–≤—É–∫–æ–≤–æ–π —Å–∏–≥–Ω–∞–ª
        if (++attempt_counter > 240 && attempt_counter % 24 == 0) Buzz::warning();
        // –µ—Å–ª–∏ –∑–∞—Ç—è–Ω—É–ª–∞—Å—å —É–∂–µ –ø—Ä–∏–º–µ—Ä–Ω–æ –Ω–∞ 5 –º–∏–Ω—É—Ç - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
        // –ü–°: –¥–∞, —è –Ω–µ —É—á—ë–ª –∑–∞–¥–µ—Ä–∂–∫—É –æ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ warning()
        else if (attempt_counter > 2400) terminate();

        // –º–∏–≥–∞–Ω–∏–µ —Å–≤–µ—Ç–æ–¥–∏–æ–¥–∏–∫–æ–º
        digitalWrite(LED_PIN, !digitalRead(LED_PIN));
        delay(125);
    }
    Serial.println(WiFi.localIP());

    ArduinoOTA.onStart([]() {
        Serial.println(F("[INFO] Starting OTA."));
    });
    ArduinoOTA.onEnd([]() {
        Serial.println(F("[INFO] OTA update finished."));
        tone(TONE_PIN, 3000, 300);
    });
    ArduinoOTA.onError([](ota_error_t error) {
        Serial.print(F("[ERROR] ArduinoOTA error: "));
        Serial.println(error);
        Buzz::sos();
    });

    attempt_counter = 0;
    // —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —á–∞—Å–æ–≤ –ø–æ NTP
    Serial.print(F("[NTP] Waiting for time..."));
    configTime(TZ_Europe_Samara, 0, "pool.ntp.org", "ntp0.ntp-servers.net");
    now = time(nullptr);
    while (now < 1000000000) {
        now = time(nullptr);
        digitalWrite(LED_PIN, !digitalRead(LED_PIN));
        // –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ –≤–∞—Ä–Ω–∏–Ω–≥–∏, –∫–∞–∫ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –≤–∞–π—Ñ–∞—é
        if (++attempt_counter > 120 && attempt_counter % 12 == 0) Buzz::warning();
        if (attempt_counter > 1200) terminate();
        delay(250);
    }
    Serial.println(now);

    vk.init();
    vk.setIncomingMessagesCallback(&processEvent);

    // –¥–µ–ª–∞–µ–º –ø—è—Ç—å –ø–æ–ø—ã—Ç–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤—è–∑—å —Å —Å–µ—Ä–≤–µ—Ä–æ–º Long Poll
    // –µ—Å–ª–∏ –Ω–µ —É–¥–∞—ë—Ç—Å—è - –≤—Å—ë, –∏–∑–≤–∏–Ω–∏—Ç–µ, halt
    for (byte i = 0; i < 5; i++) {
        if (vk.longPoll()) break;
        else if (i == 2) terminate();
        Buzz::warning();
    }

    // –∞–≤—Ç–æ–ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    // –µ—Å—Ç—å 220–í –≤ –∫–ª—É–±–µ - –∑–Ω–∞—á–∏—Ç –æ–Ω –æ—Ç–∫—Ä—ã—Ç
    openFlag = digitalRead(DETECT_PIN);

    // –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    char startup_msg[120];
    snprintf_P(startup_msg, 120, PSTR("–≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: %u –º—Å\r\nmfln: %d/%d\r\nrst reason: %u\r\n220v: %u"),
               millis() - startup_counter, vk.getApiMFLNStatus(), vk.getLpMFLNStatus(),
               resetInfo->reason, static_cast<uint8_t>(openFlag));
    vk.sendMessage(sa_dialog_id, startup_msg);

    tone(TONE_PIN, Buzz::bootOK, 250);
    //lastChangeTime = time(nullptr);

    digitalWrite(LED_PIN, openFlag);
    attachInterrupt(digitalPinToInterrupt(BTN_PIN), toggleKonturState, FALLING);
}

void loop()
{
    static byte fail_count = 0, fail_flag = 0;

    // —á–∞—Å–∏–∫–∏
    now = time(nullptr);
    _now = localtime(&now);

    // –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º OTA
    if (otaFlag) {
        Serial.println(F("[INFO] Halting for OTA mode."));
        buzz(Buzz::ota_ready, 2);

        uint32_t ota_timeout = millis();

        vk.stop();
        ArduinoOTA.begin();
        // –∂–¥—ë–º OTA —Å —Ç–∞–π–º–∞—É—Ç–æ–º 5 –º–∏–Ω—É—Ç
        while (millis() - ota_timeout < 300000) {
            ArduinoOTA.handle();
            yield();
        }
        // –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Ç–∞–π–º–∞—É—Ç–∞ - —Ä–µ–±—É—Ç
        ESP.restart();
    }

    // —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
    if (fail_flag > 0 && fail_count == 0) {
        char msg[100];
        switch (fail_flag) {
        case 1:
            strcpy_P(msg, PSTR("–±–æ—Ç—É —Å—Ç–∞–ª–æ —Ö—É–¥–æ, –Ω–æ –æ–Ω —Å–º–æ–≥ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å —Å–≤–æ–∏ —Å—Ç—Ä–∞–¥–∞–Ω–∏—è."));
            break;
        case 2: strcpy_P(msg, PSTR("–∫—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–±–æ–π wi-fi")); break;
        }

        vk.sendMessage(sa_dialog_id, msg);
        fail_counter[fail_flag - 1]++;
        fail_flag = 0;
    }

    // —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–∫–ª—é—á–µ–Ω–∏–∏ —Å–≤–µ—Ç–∞ –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç
    static bool last220Vstate = openFlag;
    static uint8_t reminder_count = 0;
    detect220V = digitalRead(DETECT_PIN);
    if (detect220V != last220Vstate) {
        // –ø—è—Ç—å –ø–æ–ø—ã—Ç–æ–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ—É –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç
        // –∞ —Ç–æ –≤–¥—Ä—É–≥ —á–µ–≥–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç
        // TODO: —Ö–≤–∞—Ç–∏—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
        for (byte i = 0; i < 5; i++) {
            int status = vk.sendMessage(sa_dialog_id, detect220V ? "–≤–∫–ª—é—á–µ–Ω —Å–≤–µ—Ç" : "—Å–≤–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω");
            if (status > -1) break;
            else if (i == 4) terminate();
            else Buzz::warning();
        }
        reminder_count = 0;
        last220Vstate = detect220V;
    }
    // –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è/–∑–∞–∫—Ä—ã—Ç–∏—è –∫–ª—É–±–∞
    if (openFlag != detect220V && reminder_count < 255 && reminder_count++ < 20) {
        buzz(Buzz::reminder, 4);
    }

    // —Å–ø–æ–∫–æ–π–Ω–æ –æ–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä –í–ö –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
    // –µ—Å–ª–∏ 5 –ø–æ–¥—Ä—è–¥ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ —Å–≤—è–∑–∏ - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–±–æ—Ç—É
    if (!vk.longPoll()) {
        fail_flag = 1;
        Buzz::warning();
        if (++fail_count > 5) terminate();
    } else fail_count = 0;

    // –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –ø—Ä–æ–ø–∞–ª–∞ —Å–≤—è–∑—å —Å wi-fi - –ø–∏—â–∏–º –∏ –ø–æ–¥–º–∏–≥–∏–≤–∞–µ–º –¥–∏–æ–¥–∏–∫–æ–º
    // –∞ –ø–æ—Å–ª–µ 3 –º–∏–Ω—É—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Å–≤—è–∑–∏ - terminate
    while (WiFi.status() != WL_CONNECTED) {
        fail_flag = 2;
        delay(2000);
        if (++fail_count > 90) terminate();
        digitalWrite(LED_PIN, !openFlag);
        Buzz::warning();
        digitalWrite(LED_PIN, openFlag);
    }

    // –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–æ—á–∫—É
    if (buttonPress) {
        openFlag = !openFlag;
        digitalWrite(LED_PIN, openFlag);
        // –ø—è—Ç—å –ø–æ–ø—ã—Ç–æ–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ—É –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç
        // –∞ —Ç–æ –≤–¥—Ä—É–≥ —á–µ–≥–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç
        for (byte i = 0; i < 5; i++) {
            int status = vk.sendMessage(sa_dialog_id, openFlag ? "–∫–ª—É–± –æ—Ç–∫—Ä—ã–ª—Å—è" : "–∫–ª—É–± –∑–∞–∫—Ä—ã–ª—Å—è");
            if (status > -1) break;
            else if (i == 4) terminate();
            else Buzz::warning();
        }
        //lastChangeTime = time(nullptr);

        buttonPress = false;
    }

    // –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –≤ –≤–∏–¥–µ –∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏—è –∫–ª—É–±–∞ –≤ 22:00
    if (openFlag && _now->tm_hour >= 22 || _now->tm_hour <= 8) {
        openFlag = false;
        digitalWrite(LED_PIN, false);

        vk.sendMessage(sa_dialog_id, "–∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–µ 22:00-8:00");
    }
}
